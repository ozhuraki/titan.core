/******************************************************************************
 * Copyright (c) 2000-2021 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 *
 * Contributors:
 *   Baranyi, Botond
 *
 ******************************************************************************/
module oop2 {

type component CT {}

type class C1 {
  private const integer m_const1;
  private const integer m_const2 := 4;
  private template integer m_temp1;
  private template integer m_temp2 := (0..10);
  private var integer m_var1;
  private var integer m_var2 := 10;
  private var template integer m_var_temp1;
  private var template integer m_var_temp2 := (1, 2, 4, 8);
  
  public function test_members() {
    if (m_const1 != 3) {
      setverdict(fail, "m_const1 = ", m_const1);
    }
    if (m_const2 != 4) {
      setverdict(fail, "m_const2 = ", m_const2);
    }
    if (log2str(m_temp1) != "?") {
      setverdict(fail, "m_temp1 = ", m_temp1);
    }
    if (log2str(m_temp2) != "(0 .. 10)") {
      setverdict(fail, "m_temp2 = ", m_temp2);
    }
    if (m_var1 != -1) {
      setverdict(fail, "m_var1 = ", m_var1);
    }
    if (m_var2 != -2) {
      setverdict(fail, "m_var2 = ", m_var2);
    }
    if (log2str(m_var_temp1) != "(0 .. infinity)") {
      setverdict(fail, "m_var_temp1 = ", m_var_temp1);
    }
    if (log2str(m_var_temp2) != "(1, 2, 4, 8)") {
      setverdict(fail, "m_var_temp2 = ", m_var_temp2);
    }
  }
}

testcase tc_constructor_default() runs on CT {
  var C1 x := C1.create(3, ?, -1, -2, (0..infinity), -);
  x.test_members();
  setverdict(pass);
}


type class C2 {
  private const integer m_const1;
  private const integer m_const2 := 4;
  private template integer m_temp1;
  private template integer m_temp2 := (0..10);
  private var integer m_var1;
  private var integer m_var2 := 10;
  private var template integer m_var_temp1;
  private var template integer m_var_temp2 := (1, 2, 4, 8);
  
  create() {
    m_const1 := 1;
    m_temp1 := ?;
  }
  
  public function test_members() {
    if (m_const1 != 1) {
      setverdict(fail, "m_const1 = ", m_const1);
    }
    if (m_const2 != 4) {
      setverdict(fail, "m_const2 = ", m_const2);
    }
    if (log2str(m_temp1) != "?") {
      setverdict(fail, "m_temp1 = ", m_temp1);
    }
    if (log2str(m_temp2) != "(0 .. 10)") {
      setverdict(fail, "m_temp2 = ", m_temp2);
    }
    if (isbound(m_var1)) {
      setverdict(fail, "m_var1 = ", m_var1);
    }
    if (m_var2 != 10) {
      setverdict(fail, "m_var2 = ", m_var2);
    }
    if (isbound(m_var_temp1)) {
      setverdict(fail, "m_var_temp1 = ", m_var_temp1);
    }
    if (log2str(m_var_temp2) != "(1, 2, 4, 8)") {
      setverdict(fail, "m_var_temp2 = ", m_var_temp2);
    }
  }
}

testcase tc_constructor_init() runs on CT {
  var C2 x := C2.create;
  x.test_members();
  setverdict(pass);
}


type class C3 {
  private const integer m_const1;
  private const integer m_const2 := 4;
  private template integer m_temp1;
  private template integer m_temp2 := (0..10);
  private var integer m_var1;
  private var integer m_var2 := 10;
  private var template integer m_var_temp1;
  private var template integer m_var_temp2 := (1, 2, 4, 8);
  
  create() {
    m_temp1 := ?;
  }
}

testcase tc_constructor_uninit_const() runs on CT {
  @try {
    var C3 x := C3.create;
    setverdict(fail, "Error expected.");
  }
  @catch (msg) {
    var template charstring exp := pattern "*Constant member `m_const1' is not initialized by the end of the constructor's execution.";
    if (match(msg, exp)) {
      setverdict(pass);
    }
    else {
      setverdict(fail, "Invalid error: ", msg);
    }
  }
}


type class C4 {
  private const integer m_const1;
  private const integer m_const2 := 4;
  private template integer m_temp1;
  private template integer m_temp2 := (0..10);
  private var integer m_var1;
  private var integer m_var2 := 10;
  private var template integer m_var_temp1;
  private var template integer m_var_temp2 := (1, 2, 4, 8);
  
  create() {
    m_const1 := 1;
  }
}

testcase tc_constructor_uninit_temp() runs on CT {
  @try {
    var C4 x := C4.create;
    setverdict(fail, "Error expected.");
  }
  @catch (msg) {
    var template charstring exp := pattern "*Template member `m_temp1' is not initialized by the end of the constructor's execution.";
    if (match(msg, exp)) {
      setverdict(pass);
    }
    else {
      setverdict(fail, "Invalid error: ", msg);
    }
  }
}


type record Rec {
  integer num,
  charstring str
}

type class C5 {
  private const integer c1 := c2;
  private const integer c2 := 3;
  private template integer t1 := (t2, c3);
  private template integer t2 := (1..4);
  private const integer c3 := 9;
  private var Rec v1 := { c4, "x" };
  private const integer c4 := 10;
  private var template Rec vt1 := { num := vt2, str := v3 };
  private var template integer vt2 := (0..100);
  private var charstring v3 := "y";
  
  create() {
    if (c1 != 3) {
      setverdict(fail, "c1 = ", c1);
    }
    template integer t1_exp := ((1..4), 9);
    if (log2str(t1) != log2str(t1_exp)) {
      setverdict(fail, "t1 = ", t1);
    }
    if (v1 != { 10, "x" }) {
      setverdict(fail, "v1 = ", v1);
    }
    template Rec vt1_exp := { num := (0..100), str := "y" };
    if (log2str(vt1) != log2str(vt1_exp)) {
      setverdict(fail, "vt1 = ", vt1);
    }
  }
}

testcase tc_member_init_rearrange() runs on CT {
  var C5 x := C5.create; // the actual tests are in the constructor
  setverdict(pass);
}

type class C6 {
  private const integer c1 := 2;
  private const Rec c2 := { 4, "x" };
  /* protected */ var template Rec vt1 := { num := t1, str := int2str(c1) & c2.str };
  private template integer t1 := (0..100);
  
  // default constructor:
  // create(template Rec vt1 := { num := t1, str := int2str(c1) & c2.str }) {
  //   this.vt1 = vt1;
  // }
  
  public function f_test(template Rec pt_exp) {
    if (log2str(vt1) != log2str(pt_exp)) {
      setverdict(fail, "vt1: ", vt1, ", expected: ", pt_exp);
    }
  }
}

testcase tc_references_in_default_values() runs on CT {
  var C6 x := C6.create;
  x.f_test( { num := (0..100), str := "2x" } );
  setverdict(pass);
}


template Rec t_def := { num := 1, str := "abc" };

type class C7 extends C6 {
  private var integer v1 := 6;
  create(template Rec pt1 := t_def, template integer pt2 := v1): C6(pt1) {
    if (log2str(pt1) != log2str(t_def)) {
      setverdict(fail, "pt1: ", pt1);
    }
    if (log2str(vt1) != log2str(t_def)) {
      setverdict(fail, "vt1: ", vt1);
    }
    if (not isvalue(pt2) or valueof(pt2) != 6) {
      setverdict(fail, "pt2: ", pt2);
    }
  }
}

testcase tc_base_call_with_default_value_parameter() runs on CT {
  var C7 x := C7.create; // the actual tests are in the constructor
  setverdict(pass);
}

const charstring c_c8_exp := "abc";

type class C8 {
  private var Rec v1 := { 10, "x" };
  private var template integer vt1 := (0 .. v1.num);
  create(charstring v1) {
    if (v1 != c_c8_exp) {
      setverdict(fail, "v1 (parameter): ", v1);
    }
    if (this.v1 != { 10, "x" }) {
      setverdict(fail, "this.v1: ", this.v1);
    }
    var template integer vt1_exp := (0 .. 10);
    if (log2str(vt1) != log2str(vt1_exp)) {
      setverdict(fail, "vt1: ", vt1);
    }
  }
}

testcase tc_constructor_param_name_clash() runs on CT {
  var C8 x := C8.create(c_c8_exp); // the actual tests are in the constructor
  setverdict(pass);
}


type record of integer IntList;

type class C9 {
  create(Rec p1, template IntList p2) {
    if (p1 != { num := 3, str := "abc" }) {
      setverdict(fail, "p1: ", p1);
    }
    template IntList p2_exp := { 1, (1 .. 10), ? };
    if (log2str(p2) != log2str(p2_exp)) {
      setverdict(fail, "p2: ", p2);
    }
  }
}

template integer t_global := (1..10);

function f_int(IntList p) return integer {
  return sizeof(p);
}

type class C10 extends C9 {
  create(): C9( { f_int({ 1, 2, 3 }), "abc" }, { 1, t_global, ? } ) { }
}

testcase tc_base_call_with_structure_parameter() runs on CT {
  var C10 x := C10.create(); // the actual tests are in the constructor
  setverdict(pass);
}


type class @trait C11_Trait {
  public function @abstract f(charstring p_test) return charstring;
}

type class @abstract C11_Base extends C11_Trait { // also extends 'object'
 public function f(charstring p_test := "test") return charstring {
    return p_test & " from base";
  } 
}

type class @final C11_Sub extends C11_Base {
  public function f(charstring p_test := "test") return charstring {
    return p_test & " from sub";
  } 
}

testcase tc_multiple_inheritance_and_default_values() runs on CT {
  // the main test here is the C++ compilation of the generated code
  var C11_Sub x1 := C11_Sub.create;
  var charstring res1 := x1.f();
  if (res1 != "test from sub") {
    setverdict(fail, "x1.f() returned ", res1);
  }
  var C11_Trait x2 := C11_Sub.create;
  var charstring res2 := x2.f("TEST");
  if (res2 != "TEST from sub") {
    setverdict(fail, "x2.f() returned ", res2);
  }
  setverdict(pass);
}


control {
  execute(tc_constructor_default());
  execute(tc_constructor_init());
  execute(tc_constructor_uninit_const());
  execute(tc_constructor_uninit_temp());
  execute(tc_member_init_rearrange());
  execute(tc_references_in_default_values());
  execute(tc_base_call_with_default_value_parameter());
  execute(tc_constructor_param_name_clash());
  execute(tc_base_call_with_structure_parameter());
  execute(tc_multiple_inheritance_and_default_values());
}

}
