/******************************************************************************
 * Copyright (c) 2000-2021 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *
 ******************************************************************************/
module AttributeTestcases {

import from JsonFunctions all;
import from JsonTypes1 all;
import from JsonTypes0 all;

type component CT {}

//tests in case of no attributes:
//if omit fields do not appear in the encoded text
//if all not omitted field appear in the encoded text
//if all not omitted field value appear in the correct form
testcase tc_NoAttributeOnUpperLevel() runs on CT {
  var Profile0 p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := omit,
    meetings := omit
  }

  var octetstring os := char2oct("{\"name\":\"Bob\",\"phone_no\":{\"CountryPrefix\":6,\"NetworkPrefix\":1,\"LocalNumber\":3377760}}");
  f_check_encoding(encoded:= f_enc_profile0(p), expected := os);
  f_bool2verdict( match(f_dec_profile0(f_enc_profile0(p)), p) );
}

//tests in case of selecting attributes:
//if omit fields appear in the encoded
//if all not omitted field value appear in the correct form
testcase tc_name_as_omit_as_null() runs on CT {
  var Profile p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := omit,
    meetings := omit
  }

  var octetstring os := char2oct("{\"name\":\"Bob\",\"phone\":{\"CountryPrefix\":6,\"NetworkPrefix\":1,\"LocalNumber\":3377760},\"meetings\":null}");
  f_check_encoding(encoded:= f_enc_profile(p), expected := os);
  f_bool2verdict( match(f_dec_profile(f_enc_profile(p)), p) );
}

testcase tc_name_as() runs on CT {
  var Profile p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := "bob@ericsson.com",
    meetings := omit
  }
  
  var octetstring os := char2oct("{\"name\":\"Bob\",\"phone\":{\"CountryPrefix\":6,\"NetworkPrefix\":1,\"LocalNumber\":3377760},\"email\":\"bob@ericsson.com\",\"meetings\":null}");
  f_check_encoding(encoded:= f_enc_profile(p), expected := os);
  f_bool2verdict( match(f_dec_profile(f_enc_profile(p)), p) );
}

// testing attribute "name as ..." when the aliases are keywords of the JSON variant syntax
testcase tc_name_as_with_keywords() runs on CT {
  var KeywordFields p := { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
  var octetstring os := char2oct("{\"omit\":1,\"as\":2,\"null\":3,\"name\":4,\"value\":5,\"default\":6,\"extend\":7,\"metainfo\":8,\"for\":9,\"unbound\":10,\"JSON\":11}");
  f_check_encoding(encoded := f_enc_kw_fld(p), expected := os);
  f_bool2verdict( match(f_dec_kw_fld(os), p) );
}

//tests in case of selecting attributes:
//if omit fields appear in the encoded
//if all not omitted field value appear in the correct form
testcase tc_attribute_compactprint1() runs on CT {
  var Profile p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := omit,
    meetings := omit
  }

  var octetstring os := char2oct("{\"name\":\"Bob\",\"phone\":{\"CountryPrefix\":6,\"NetworkPrefix\":1,\"LocalNumber\":3377760},\"meetings\":null}");
  f_check_encoding(encoded:= f_enc_profile_compact(p), expected := os);
  f_bool2verdict( match(f_dec_profile(f_enc_profile_compact(p)), p) );
}

testcase tc_attribute_compactprint2() runs on CT {
  var Profile p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := "bob@ericsson.com",
    meetings := omit
  }
  
  var octetstring os := char2oct("{\"name\":\"Bob\",\"phone\":{\"CountryPrefix\":6,\"NetworkPrefix\":1,\"LocalNumber\":3377760},\"email\":\"bob@ericsson.com\",\"meetings\":null}");
  f_check_encoding(encoded:= f_enc_profile_compact(p), expected := os);
  f_bool2verdict( match(f_dec_profile(f_enc_profile_compact(p)), p) );
}

testcase tc_attribute_compactprintp() runs on CT {
  var Profile p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := "bob@ericsson.com",
    meetings := omit
  }
  
  var octetstring os := char2oct("{\"name\":\"Bob\",\"phone\":{\"CountryPrefix\":6,\"NetworkPrefix\":1,\"LocalNumber\":3377760},\"email\":\"bob@ericsson.com\",\"meetings\":null}");
  f_check_encoding(encoded:= f_enc_profile_compact_p(p), expected := os);
  f_bool2verdict( match(f_dec_profile(f_enc_profile_compact_p(p)), p) );
}


//tests in case of selecting attributes:
//if omit fields appear in the encoded
//if all not omitted field value appear in the correct form
//pretty printing
testcase tc_attribute_prettyprint1() runs on CT {
  var Profile p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := omit,
    meetings := omit
  }

  var octetstring os := char2oct("{\n\t\"name\" : \"Bob\",\n\t\"phone\" : {\n\t\t\"CountryPrefix\" : 6,\n\t\t\"NetworkPrefix\" : 1,\n\t\t\"LocalNumber\" : 3377760\n\t},\n\t\"meetings\" : null\n}");
  f_check_encoding(encoded:= f_enc_profile_pretty(p), expected := os);
  f_bool2verdict( match(f_dec_profile(f_enc_profile(p)), p) );
}

//pretty printing
testcase tc_attribute_prettyprint2() runs on CT {
  var Profile p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := "bob@ericsson.com",
    meetings := omit
  }
  
  var octetstring os := char2oct("{\"name\":\"Bob\",\"phone\":{\"CountryPrefix\":6,\"NetworkPrefix\":1,\"LocalNumber\":3377760},\"email\":\"bob@ericsson.com\",\"meetings\":null}");
  f_check_encoding(encoded:= f_enc_profile(p), expected := os);
  f_bool2verdict( match(f_dec_profile(f_enc_profile(p)), p) );
}



testcase tc_attribute_union() runs on CT {
  var CBA c:= {
   f_val:= 1.75
  }
  var octetstring os := char2oct("{\"float\":1.750000}");
  f_check_encoding(encoded:= f_enc_cba(c) , expected := os);
  f_bool2verdict( match(f_dec_cba(f_enc_cba(c)), c) );
  
  c:= { i_val := -2 }
  os := char2oct("{\"int\":-2}");
  f_check_encoding(encoded:= f_enc_cba(c) , expected := os);
  f_bool2verdict( match(f_dec_cba(f_enc_cba(c)), c) );
  
  c:= { cs_val := "Hello" }
  os := char2oct("{\"string\":\"Hello\"}");
  f_check_encoding(encoded:= f_enc_cba(c) , expected := os);
  f_bool2verdict( match(f_dec_cba(f_enc_cba(c)), c) );
  
  c:= { date_val := {"March",28,Friday} }
  os := char2oct("{\"date\":{\"month\":\"March\",\"day_idx\":28,\"day_name\":\"Friday\"}}");
  f_check_encoding(encoded:= f_enc_cba(c) , expected := os);
  f_bool2verdict( match(f_dec_cba(f_enc_cba(c)), c) );
}

// Encoding unions as JSON values (without the braces and the field name)
// The decoder will attempt to decode each field and the first to successfully decode the value
// will be the selected one (thus the order of the fields is important)
testcase tc_attribute_as_value() runs on CT {
  var Stuff stuff := { { ival := 18 }, { osval := '1D66FE'O }, { csval := "almafa" }, { bval := true }, { fval := 1.8e-20}, { ucsval := "almácska" }, { bsval := '1101101'B }, { prodval := { name := "Shoe", price := 79.99, code := 'A4C'H } }, { roival := { 1, 3, 3, 7 } }, { prod2val := { "Car", 14000.0, omit } }, { sizeval := Large }, { unival := { hsval := 'EE0'H } }, { unival := { rocsval := { "one", "two", "ten" } } } };

  var octetstring os := unichar2oct("[18,\"1D66FE\",\"almafa\",true,1.800000e-20,\"almácska\",\"1101101\",{\"name\":\"Shoe\",\"price\":79.990000,\"code\":\"A4C\"},[1,3,3,7],{\"name\":\"Car\",\"price\":14000.000000},\"Large\",\"EE0\",[\"one\",\"two\",\"ten\"]]", "UTF-8");
  f_check_encoding(encoded:= f_enc_stuff(stuff) , expected := os);
  f_bool2verdict( match(f_dec_stuff(f_enc_stuff(stuff)), stuff) );
  //log(match(f_dec_stuff(f_enc_stuff(stuff)), stuff));
  setverdict(pass);
}

// Testing legacy default values for record fields (decoding only)
testcase tc_attribute_default_legacy() runs on CT {
  var octetstring os := char2oct("{}");
  var RecDef d := { i := -19, f := 1000000.000000, b := false, bs := '101'B, hs := 'DEAD'H, os := '1DE7'O, cs := "empty", ucs := "üres", size := Tiny, vt := fail };
  f_bool2verdict( match(f_dec_def(os), d) );

  os := char2oct("{ \"b\" : null }");
  d.b := omit;
  f_bool2verdict( match(f_dec_def(os), d) );
}

// Testing standard-compliant default values for record fields of basic types (decoding only)
testcase tc_attribute_default_basic() runs on CT {
  var octetstring os := char2oct("{}");
  var RecDef2 d := { i := -19, f := 1000000.000000, b := false, bs := '101'B, hs := 'DEAD'H, os := '1DE7'O, cs := "empty", ucs := "üres", size := Tiny, vt := fail };
  f_bool2verdict( match(f_dec_def2(os), d) );

  os := char2oct("{ \"b\" : null }");
  d.b := omit;
  f_bool2verdict( match(f_dec_def2(os), d) );
}

// Tests for standard-compliant default values taken from the TTCN-3 standard change request CR 7968 v5 (decoding only)
testcase tc_attribute_default_standard() runs on CT {
  var octetstring os := char2oct("{ \"name\" : \"Shoe\", \"price\" : 29.50, \"text\" : \"available\" }");
  var Product2 p := { name := "Shoe", price := 29.500000, id := 'FFFF'O, origin := "Hungary", text := "available" };
  f_bool2verdict( match(f_dec_prod2(os), p) );
  
  os := char2oct("{ \"name\" : \"Shirt\", \"price\" : 12.99, \"id\" : null }");
  p := { name := "Shirt", price := 12.990000, id := omit, origin := "Hungary", text := char(1, 2, 3, 4) & char(5, 6, 7, 8) & "?" };
  f_bool2verdict( match(f_dec_prod2(os), p) );
  
  os := char2oct("{ \"name\" : \"test shopper\" }");
  var Shopping_cart sc := { name := "test shopper", product := { name := "Shirt", price := 12.990000, id := omit, origin := "Hungary", text := "available" } };
  f_bool2verdict( match(f_dec_cart(os), sc) );
  
  os := char2oct("{ \"name\" : \"test shopper\" }");
  var Shopping_cart_2 sc2 := { name := "test shopper", product := { name := "Size \"M\" Shirt", price := 12.990000, id := omit, origin := "Hungary", text := "available" } };
  f_bool2verdict( match(f_dec_cart2(os), sc2) );
}

// Testing standard-compliant default values for record fields of structured types (decoding only)
testcase tc_attribute_default_structured() runs on CT {
  var octetstring os := char2oct("{ }");
  var RecDef3 d := { er := { }, u := { i := -6 }, roi := { 1, 2, 3 } };
  f_bool2verdict( match(f_dec_def3(os), d) );
}

// Encoding a few values of ASN.1 types with the coding instruction "as value"
// Results are the same as with the TTCN-3 types
testcase tc_attribute_as_value_asn() runs on CT {
  var AsnStuff stuff := { { nval := NULL }, { ival := -10 }, { anyval := 'DCBA'O }, { vsval := "something" }, { pardval := { id := 0, priority := low, val := { iNTEGER := -10 } } } };
  var octetstring os := char2oct("[null,-10,\"DCBA\",\"something\",{\"id\":0,\"priority\":\"low\",\"val\":{\"iNTEGER\":-10}}]");
  f_check_encoding(encoded := f_enc_asn_stuff(stuff), expected := os);
  f_bool2verdict( match(f_dec_asn_stuff(f_enc_asn_stuff(stuff)), stuff) );
}

// Encoding a record with 2 optional union fields encoded as JSON values (attribute 'as value')
// and as the 'null' value when omitted (attribute 'omit as null').
// One of the unions ('uniAsn') can decode the JSON value 'null' (field 'nval'), thus omitting
// the union and setting this field have the same encoding, and decoding 'null' always sets the
// field instead of omitting the union.
// The other union ('uniTtcn') cannot decode the JSON value 'null', thus decoding 'null' omits
// the union.
testcase tc_attribute_optional_as_value() runs on CT {
  var OptionalUnions val1 := { dummy := "nothing", uniTtcn := omit, uniAsn := omit };
  var OptionalUnions val2 := { dummy := "nothing", uniTtcn := omit, uniAsn := { nval := NULL } };
  var octetstring os := char2oct("{\"dummy\":\"nothing\",\"uniTtcn\":null,\"uniAsn\":null}");
  f_check_encoding(encoded := f_enc_opt_uni(val1), expected := os);
  f_check_encoding(encoded := f_enc_opt_uni(val2), expected := os);
  f_bool2verdict( match(f_dec_opt_uni(os), val2) );
}

// Encoding records and sets with unbound fields with meta info (attribute 'metainfo for unbound')
// The unbound fields will have the 'null' value and an extra (meta info) field will be inserted
// into the JSON document (after the current field) to specify that the field is unbound.
testcase tc_attribute_metainfo_for_unbound() runs on CT {
  // regular encoding and decoding tests
  var MetainfoRecord r := { num := 6 };
  var octetstring os := char2oct("{\"num\":6,\"str\":null,\"metainfo str\":\"unbound\"}");
  f_check_encoding(encoded := f_enc_meta_rec(r), expected := os);
  f_bool2verdict( log2str(f_dec_meta_rec(os)) == log2str(r) );
  
  var MetainfoSet s := { str := "abc" };
  os := char2oct("{\"int\":null,\"metainfo int\":\"unbound\",\"str\":\"abc\",\"octets\":null,\"metainfo octets\":\"unbound\"}");
  f_check_encoding(encoded := f_enc_meta_set(s), expected := os);
  f_bool2verdict( log2str(f_dec_meta_set(os)) == log2str(s) );
  
  // positive decoding tests (these cannot be produced by the encoder, but are still accepted by the decoder)
  os := char2oct("{ \"int\" : 3, \"str\" : \"abc\", \"octets\" : \"1234\", \"metainfo int\" : \"unbound\" }");
  var MetainfoSet res := { str := "abc", octets := '1234'O };
  f_bool2verdict( log2str(f_dec_meta_set(os)) == log2str(res) );
  
  os := char2oct("{ \"metainfo int\" : \"unbound\", \"int\" : null, \"str\" : \"abc\", \"octets\" : \"1234\" }");
  f_bool2verdict( log2str(f_dec_meta_set(os)) == log2str(res) ); // same expected result
}

// Negative tests for decoding with the unbound meta info attribute
testcase tc_attribute_metainfo_for_unbound_negtest() runs on CT {
  var octetstring os := char2oct("{ \"metainfo num\" : \"unbound\", \"num\" : 6, \"str\" : \"qwe\" }");
  var MetainfoRecord dummyRec;
  @try {
    dummyRec := f_dec_meta_rec(os);
    setverdict(fail, "Expected error when decoding ", os);
  }
  @catch (msg) {
    if (not match (msg, pattern "*Meta info not applicable to field 'num'")) {
      setverdict(fail, "Unexpected error message when decoding ", os, " (msg: ", msg, ")");
    }
  }
  
  os := char2oct("{ \"metainfo dummy\" : \"unbound\", \"num\" : 6, \"str\" : \"qwe\" }");
  @try {
    dummyRec := f_dec_meta_rec(os);
    setverdict(fail, "Expected error when decoding ", os);
  }
  @catch (msg) {
    if (not match (msg, pattern "*Meta info provided for non-existent field 'dummy'")) {
      setverdict(fail, "Unexpected error message when decoding ", os, " (msg: ", msg, ")");
    }
  }
  
  os := char2oct("{ \"int\" : 3, \"str\" : \"abc\", \"octets\" : \"1234\", \"metainfo int\" : \"bound\" }");
  var MetainfoSet dummySet;
  @try {
    dummySet := f_dec_meta_set(os);
    setverdict(fail, "Expected error when decoding ", os);
  }
  @catch (msg) {
    if (not match (msg, pattern "*Invalid meta info for field 'num'")) {
      setverdict(fail, "Unexpected error message when decoding ", os, " (msg: ", msg, ")");
    }
  }
  
  os := char2oct("{ \"int\" : 3, \"str\" : \"abc\", \"octets\" : \"1234\", \"metainfo int\" : 88 }");
  @try {
    dummySet := f_dec_meta_set(os);
    setverdict(fail, "Expected error when decoding ", os);
  }
  @catch (msg) {
    if (not match (msg, pattern "*Invalid meta info for field 'num'")) {
      setverdict(fail, "Unexpected error message when decoding ", os, " (msg: ", msg, ")");
    }
  }
  
  os := char2oct("{ \"int\" : null, \"str\" : \"abc\", \"octets\" : \"1234\" }");
  @try {
    dummySet := f_dec_meta_set(os);
    setverdict(fail, "Expected error when decoding ", os);
  }
  @catch (msg) {
    if (not match (msg, pattern "*Invalid JSON token found while decoding field 'num'")) {
      setverdict(fail, "Unexpected error message when decoding ", os, " (msg: ", msg, ")");
    }
  }
  
  os := char2oct("{ \"metainfo int\" : \"unbound\", \"int\" : [ 1, 3 ], \"str\" : \"abc\", \"octets\" : \"1234\" }");
  @try {
    dummySet := f_dec_meta_set(os);
    setverdict(fail, "Expected error when decoding ", os);
  }
  @catch (msg) {
    if (not match (msg, pattern "*Invalid JSON token found while decoding field 'num'")) {
      setverdict(fail, "Unexpected error message when decoding ", os, " (msg: ", msg, ")");
    }
  }
  setverdict(pass);
}

// Decoding test for the 'metainfo for unbound' attribute, where all fields of an embedded record are
// set to unbound by meta info. The decoded embedded record should be unbound.
testcase tc_attribute_metainfo_for_unbound_empty_rec() runs on CT {
  var charstring dec_str := "{\"mynum\":99,\"mystr\":\"aa\", \"myRec\": {\"num\":null,\"metainfo num\":\"unbound\",\"str\":null,\"metainfo str\":\"unbound\" } }";
  var MetainfoOuterRecord dec_val := f_dec_meta_outer_rec(char2oct(dec_str));
  if (isbound(dec_val.myRec)) {
    setverdict(fail, "Field myrec should be unbound after decoding, instead of ", dec_val.myRec);
  }
  var MetainfoOuterRecord dec_val_exp := { mynum := 99, mystr := "aa", myRec := - };
  if (log2str(dec_val) != log2str(dec_val_exp)) {
    setverdict(fail, "Invalid value after decoding. Expected: ", dec_val_exp, ", got: ", dec_val);
  }
  setverdict(pass);
}

// Encoding array types with unbound elements with meta info (attribute 'metainfo for unbound')
// A JSON object with one key-value pair (containing the meta info) specifies that an element is unbound.
testcase tc_attribute_metainfo_for_unbound_arrays() runs on CT {
  // test 1: pre-generated array type (record of integer)
  var MetainfoRecOf recof := { 1, 2, -, 4 };
  var octetstring os := char2oct("[1,2,{\"metainfo []\":\"unbound\"},4]");
  f_check_encoding(encoded := f_enc_meta_recof(recof), expected := os);
  f_bool2verdict( log2str(f_dec_meta_recof(os)) == log2str(recof) );
  
  // test 2: array of a structured type (set of MetainfoRecord)
  var MetainfoSetOf setof := { { num := 3, str := "abc" }, -, { num := 6 } };
  os := char2oct("[{\"num\":3,\"str\":\"abc\"},{\"metainfo []\":\"unbound\"},{\"num\":6,\"str\":null,\"metainfo str\":\"unbound\"}]");
  f_check_encoding(encoded := f_enc_meta_setof(setof), expected := os);
  f_bool2verdict( log2str(f_dec_meta_setof(os)) == log2str(setof) );
  
  // test 3: TTCN-3 array (float [3])
  var MetainfoArray arr := { 3.0, 6.0, - };
  os := char2oct("[3.000000,6.000000,{\"metainfo []\":\"unbound\"}]");
  f_check_encoding(encoded := f_enc_meta_arr(arr), expected := os);
  f_bool2verdict( log2str(f_dec_meta_arr(os)) == log2str(arr) );
}

// Encoding a record with one field without field names (attribute 'as value')
// The record value's encoding in this case is equal to the field's encoding
testcase tc_attribute_as_value_rec() runs on CT {
  var RecAsValue val := { field := 10 };
  var bitstring enc_exp := oct2bit(char2oct("10"));
  var bitstring enc := encvalue(val);
  if (enc != enc_exp) {
    setverdict(fail, "Encoding failed. Expected: ", enc_exp, ", got: ", enc);
  }
  else {
    var RecAsValue dec;
    var integer res := decvalue(enc, dec);
    if (res != 0) {
      setverdict(fail, "Decoding failed. Result: ", res);
    }
    else if (lengthof(enc) != 0) {
      setverdict(fail, "Decoding failed. Remaining bits: ", enc);
    }
    else if (dec != val) {
      setverdict(fail, "Decoding failed. Expected value: ", val, ", got: ", dec);
    }
    else {
      setverdict(pass);
    }
  }
}

// Encoding a record with one field without any variant attributes
// (The code generated in this case is different, because of the possibility of
// adding the 'as value' attribute for a subtype)
testcase tc_attribute_not_as_value_rec() runs on CT {
  var RecNotAsValue val := { field := { 1.0, 2.0 } };
  var bitstring enc_exp := oct2bit(char2oct("{\"field\":[1.000000,2.000000]}"));
  var bitstring enc := encvalue(val);
  if (enc != enc_exp) {
    setverdict(fail, "Encoding failed. Expected: ", enc_exp, ", got: ", enc);
  }
  else {
    var RecNotAsValue dec;
    var integer res := decvalue(enc, dec);
    if (res != 0) {
      setverdict(fail, "Decoding failed. Result: ", res);
    }
    else if (lengthof(enc) != 0) {
      setverdict(fail, "Decoding failed. Remaining bits: ", enc);
    }
    else if (dec != val) {
      setverdict(fail, "Decoding failed. Expected value: ", val, ", got: ", dec);
    }
    else {
      setverdict(pass);
    }
  }
}

// Encoding a set, whose fields are encoded without field names (attribute 'as value' for the fields)
// The base types of the fields do not have the 'as value' attribute set, only when they are used as
// fields of this set (one of the fields is an anytype, which cannot have this attribute otherwise).
// The set itself is encoded with field names, but its fields are encoded as values.
testcase tc_attribute_as_value_fields() runs on CT {
  var SetWithAsValueFields val := {
    uni := { i := -3 },
    rec := { field := { 1.0, 2.0 } },
    list := {
      { integer := 12 },
      { charstring := "abc" },
      { R := { i := 6, cs := "xy", b := false, d := Wednesday } },
      { Thing := { bval := true } },
      { RoI := { 1, 2, 3 } }
    }
  };
  var bitstring enc_exp := oct2bit(char2oct("{\"uni\":-3,\"rec\":[1.000000,2.000000],\"list\":[12,\"abc\",{\"i\":6,\"cs\":\"xy\",\"b\":false,\"d\":\"Wednesday\"},true,[1,2,3]]}"));
  var bitstring enc := encvalue(val);
  if (enc != enc_exp) {
    setverdict(fail, "Encoding failed. Expected: ", enc_exp, ", got: ", enc);
  }
  else {
    var SetWithAsValueFields dec;
    var integer res := decvalue(enc, dec);
    if (res != 0) {
      setverdict(fail, "Decoding failed. Result: ", res);
    }
    else if (lengthof(enc) != 0) {
      setverdict(fail, "Decoding failed. Remaining bits: ", enc);
    }
    else if (dec != val) {
      setverdict(fail, "Decoding failed. Expected value: ", val, ", got: ", dec);
    }
    else {
      setverdict(pass);
    }
  }
}

testcase tc_attribute_as_number() runs on CT {
  var RecWithAsNumber val := {
    lengths := { Short, Medium, Long },
    days := { Monday, Saturday, Thursday }
  };
  var bitstring enc_exp := oct2bit(char2oct("{\"lengths\":[0,50,100],\"days\":[0,5,3]}"));
  var bitstring enc := encvalue(val);
  if (enc != enc_exp) {
    setverdict(fail, "Encoding failed. Expected: ", bit2oct(enc_exp), ", got: ", bit2oct(enc));
  }
  else {
    var RecWithAsNumber dec;
    var integer res := decvalue(enc, dec);
    if (res != 0) {
      setverdict(fail, "Decoding failed. Result: ", res);
    }
    else if (lengthof(enc) != 0) {
      setverdict(fail, "Decoding failed. Remaining bits: ", enc);
    }
    else if (dec != val) {
      setverdict(fail, "Decoding failed. Expected value: ", val, ", got: ", dec);
    }
    else {
      setverdict(pass);
    }
  }
}

testcase tc_attribute_as_number_negtest() runs on CT {
  var RecWithAsNumber.lengths[-] val;
  var bitstring stream := oct2bit(char2oct("\"Short\"")); // name form instead of number form
  var integer res := decvalue(stream, val);
  if (res == 0) {
    setverdict(fail, "Decoding #1 successful, expected failure. Decoded value: ", val);
  }
  stream := oct2bit(char2oct("0.5")); // real number
  res := decvalue(stream, val);
  if (res == 0) {
    setverdict(fail, "Decoding #2 successful, expected failure. Decoded value: ", val);
  }
  stream := oct2bit(char2oct("50e-1")); // real number
  res := decvalue(stream, val);
  if (res == 0) {
    setverdict(fail, "Decoding #3 successful, expected failure. Decoded value: ", val);
  }
  stream := oct2bit(char2oct("100E5")); // real number
  res := decvalue(stream, val);
  if (res == 0) {
    setverdict(fail, "Decoding #4 successful, expected failure. Decoded value: ", val);
  }
  stream := oct2bit(char2oct("22")); // integer that doesn't match any enumerated value
  res := decvalue(stream, val);
  if (res == 0) {
    setverdict(fail, "Decoding #5 successful, expected failure. Decoded value: ", val);
  }
  setverdict(pass);
}

// Testing the attribute 'default' on structures
testcase tc_attribute_default_struct() runs on CT {
  var DefaultEmptyStructs val;
  var DefaultEmptyStructs exp_val := { {}, {}, {}, {} };
  var universal charstring data := "{}";
  var integer res := decvalue_unichar(data, val);
  if (res != 0 or lengthof(data) != 0) {
    setverdict(fail, "Decoding failed. Result: ", res, ", remaining JSON data: ", data);
  }
  else if (val != exp_val) {
    setverdict(fail, "Invalid decoded value. Expected: ", exp_val, ", got: ", val);
  }
  else {
    setverdict(pass);
  }
}

// Testing the attribute 'chosen'
testcase tc_attribute_chosen() runs on CT {
  // one test for each chosen field
  var PduWithIdList val := {
    { protocolId := 11, field1 := { type1 := { num := 1, str := "abc" } }, field2 := { type2 := { num := 2, str := "xyz" } } },
    { protocolId := 2, field1 := { type2 := { num := 1, str := "abc" } }, field2 := { type1 := { num := 2, str := "xyz" } } },
    { protocolId := 3, field1 := omit, field2 := { type3 := { num := 2.0, str := "xyz" } } },
    { protocolId := 65536, field1 := { type3 := { num := 1.0, str := "abc" } }, field2 := omit }
  };
  var universal charstring enc_exp := "[" &
    "{\"protocolId\":11,\"field1\":{\"num\":1,\"str\":\"abc\"},\"field2\":{\"num\":2,\"str\":\"xyz\"}}," &
    "{\"protocolId\":2,\"field1\":{\"num\":1,\"str\":\"abc\"},\"field2\":{\"num\":2,\"str\":\"xyz\"}}," &
    "{\"protocolId\":3,\"field2\":{\"num\":2.000000,\"str\":\"xyz\"}}," &
    "{\"protocolId\":65536,\"field1\":{\"num\":1.000000,\"str\":\"abc\"}}" &
  "]";
  var universal charstring enc := encvalue_unichar(val);
  if (enc != enc_exp) {
    setverdict(fail, "Encoding failed. Expected: ", enc_exp, ", got: ", enc);
  }
  var PduWithIdList dec;
  var integer res := decvalue_unichar(enc_exp, dec);
  if (res != 0) {
    setverdict(fail, "Decoding #1 failed. Result: ", res);
  }
  else if (dec != val) {
    setverdict(fail, "Decoding #1 failed. Decoded value: ", dec, ", expected: ", val);
  }
  
  // these should also be correctly decoded to the initial values
  var universal charstring buff := "[" &
    "{\"protocolId\":65536,\"field1\":{\"num\":1,\"str\":\"abc\"},\"field2\":null}," &
    "{\"protocolId\":3,\"field1\":null,\"field2\":{\"num\":2,\"str\":\"xyz\"}}" &
  "]";
  var PduWithIdList dec2;
  var PduWithIdList dec2_exp := { val[3], val[2] };
  res := decvalue_unichar(buff, dec2);
  if (res != 0) {
    setverdict(fail, "Decoding #2 failed. Result: ", res);
  }
  else if (dec2 != dec2_exp) {
    setverdict(fail, "Decoding #2 failed. Decoded value: ", dec2, ", expected: ", dec2_exp);
  }
  setverdict(pass);
}

// Testing JSON decoding when field selections of optional fields conflict with
// the settings in attribute 'chosen'
testcase tc_attribute_chosen_negtest() runs on CT {
  // Test #1: protocolId indicates 'omit' (for field1), but the field is not omitted
  @try {
    var octetstring buff := char2oct("{\"protocolId\":3,\"field1\":{\"num\":1,\"str\":\"abc\"},\"field2\":{\"num\":2,\"str\":\"xyz\"}}");
    var PduWithId dec := f_dec_pduwithid(buff);
    setverdict(fail, "Test #1. Expected decoding failure.");
  }
  @catch (msg) {
    var template charstring tmp :=
      pattern "*Invalid JSON token, expecting 'null' \(as indicated by a condition in attribute 'chosen'\)";
    if (not match(msg, tmp)) {
      setverdict(fail, "Test #1. Invalid error message received: ", msg);
    }
  }
  
  // Test #2: protocolId indicates a union field (type1, for field1), but the field is omitted (with the JSON value 'null')
  @try {
    var octetstring buff := char2oct("{\"protocolId\":1,\"field1\":null}");
    var PduWithId dec := f_dec_pduwithid(buff);
    setverdict(fail, "Test #2. Expected decoding failure.");
  }
  @catch (msg) {
    var template charstring tmp :=
      pattern "*Field cannot be omitted \(as indicated by a condition in attribute 'chosen'\)";
    if (not match(msg, tmp)) {
      setverdict(fail, "Test #2. Invalid error message received: ", msg);
    }
  }
  
  // Test #3: protocolId indicates a union field (type1, for field1), but the field is omitted (with no JSON name-value pair)
  @try {
    var octetstring buff := char2oct("{\"protocolId\":1}");
    var PduWithId dec := f_dec_pduwithid(buff);
    setverdict(fail, "Test #3. Expected decoding failure.");
  }
  @catch (msg) {
    var template charstring tmp :=
      pattern "*Field 'field1' cannot be omitted \(as indicated by a condition in attribute 'chosen'\)";
    if (not match(msg, tmp)) {
      setverdict(fail, "Test #3. Invalid error message received: ", msg);
    }
  }
  
  // Test #4: protocolId indicates a union field (type3, for field2), but the field is omitted (with no JSON name-value pair)
  @try {
    var octetstring buff := char2oct("{\"protocolId\":3}");
    var PduWithId dec := f_dec_pduwithid(buff);
    setverdict(fail, "Test #3. Expected decoding failure.");
  }
  @catch (msg) {
    var template charstring tmp :=
      pattern "*Field 'field2' cannot be omitted \(as indicated by a condition in attribute 'chosen'\)";
    if (not match(msg, tmp)) {
      setverdict(fail, "Test #3. Invalid error message received: ", msg);
    }
  }
  setverdict(pass);
}

// Testing JSON decoding with attributes 'chosen' and 'default'.
// (The conditions in the attribute 'chosen' depend on fields that have default values.)
testcase tc_attribute_chosen_default() runs on CT {
  // Test #1: both fields use their default values
  var octetstring buff := char2oct("{\"field\":{\"num\":1,\"str\":\"abc\"}}");
  var PduWithId2 dec_exp := { protocolId1 := 1, protocolId2 := 0, field := { type1 := { num := 1, str := "abc" } } };
  var PduWithId2 dec := f_dec_pduwithid2(buff);
  if (dec != dec_exp) {
    setverdict(fail, "Test #1 failed. Expected: ", dec_exp, ", got: ", dec);
  }
  
  // Test #2: the first field uses its default value, the second decodes its value from the buffer
  buff := char2oct("{\"protocolId2\":-1,\"field\":{\"num\":1,\"str\":\"abc\"}}");
  dec_exp := { protocolId1 := 1, protocolId2 := -1, field := { type1 := { num := 1, str := "abc" } } };
  dec := f_dec_pduwithid2(buff);
  if (dec != dec_exp) {
    setverdict(fail, "Test #2 failed. Expected: ", dec_exp, ", got: ", dec);
  }
  
  // Test #3: the second field uses its default value, the first decodes its value from the buffer
  buff := char2oct("{\"protocolId1\":6,\"field\":{\"num\":1,\"str\":\"abc\"}}");
  dec_exp := { protocolId1 := 6, protocolId2 := 0, field := { type3 := { num := 1.0, str := "abc" } } };
  dec := f_dec_pduwithid2(buff);
  if (dec != dec_exp) {
    setverdict(fail, "Test #3 failed. Expected: ", dec_exp, ", got: ", dec);
  }
  
  // Test #4: both fields decode their values from the buffer
  buff := char2oct("{\"protocolId1\":6,\"protocolId2\":-1}");
  dec_exp := { protocolId1 := 6, protocolId2 := -1, field := omit };
  dec := f_dec_pduwithid2(buff);
  if (dec != dec_exp) {
    setverdict(fail, "Test #4 failed. Expected: ", dec_exp, ", got: ", dec);
  }
  
  // Test #5: both fields decode their values from the buffer,
  // however, the first field appears after the union field in the buffer,
  // so its default value is used when checking the conditions of the attribute 'chosen'
  buff := char2oct("{\"protocolId2\":-1,\"field\":{\"num\":1,\"str\":\"abc\"},\"protocolId1\":6}");
  dec_exp := { protocolId1 := 6, protocolId2 := -1, field := { type1 := { num := 1, str := "abc" } } };
  dec := f_dec_pduwithid2(buff);
  if (dec != dec_exp) {
    setverdict(fail, "Test #5 failed. Expected: ", dec_exp, ", got: ", dec);
  }
  
  setverdict(pass);
}

// Testing the attribute 'as map'
testcase tc_attribute_as_map() runs on CT {
  var Map x := { { "one", 1 }, { "two", 2 }, { "three", 3 }, { "zero", omit } };
  var octetstring enc_exp := char2oct("{\"one\":1,\"two\":2,\"three\":3,\"zero\":null}");
  var octetstring enc := f_enc_map(x);
  if (enc != enc_exp) {
    setverdict(fail, "Encoding failed. Expected: ", enc_exp, ", got: ", enc);
  }
  var Map dec := f_dec_map(enc_exp);
  if (dec != x) {
    setverdict(fail, "Decoding failed. Expected: ", x, ", got: ", dec);
  }
  setverdict(pass);
}

// Testing the attribute 'as map' in a union with the attribute 'as value'
testcase tc_attribute_as_map_in_union() runs on CT {
  var JsonValue x := {
    JsonObject := {
      {
        key := "num",
        val := { JsonInteger := 2 }
      },
      {
        key := "str",
        val := { JsonString := "abc" }
      }
    }
  };
  var octetstring enc_exp := char2oct("{\"num\":2,\"str\":\"abc\"}");
  var octetstring enc := f_enc_json_val(x);
  if (enc != enc_exp) {
    setverdict(fail, "Encoding failed. Expected: ", enc_exp, ", got: ", enc);
  }
  var JsonValue dec := f_dec_json_val(enc_exp);
  if (dec != x) {
    setverdict(fail, "Decoding failed. Expected: ", x, ", got: ", dec);
  }
  setverdict(pass);
}

// Testing the attribute 'text ... as ...'
testcase tc_attribute_text_as() runs on CT {
  var EnumNumberList x := { One, Two, Three };
  var octetstring enc_exp := char2oct("[\"1\",\"2\",\"3\"]");
  var octetstring enc := f_enc_enum_list(x);
  if (enc != enc_exp) {
    setverdict(fail, "Encoding failed. Expected: ", enc_exp, ", got: ", enc);
  }
  var EnumNumberList dec := f_dec_enum_list(enc_exp);
  if (dec != x) {
    setverdict(fail, "Decoding failed. Expected: ", x, ", got: ", dec);
  }
  setverdict(pass);
}


control {
  execute(tc_NoAttributeOnUpperLevel())
  execute(tc_name_as_omit_as_null());
  execute(tc_name_as());
  execute(tc_name_as_with_keywords());
  execute(tc_attribute_compactprint1());
  execute(tc_attribute_compactprint2());
  execute(tc_attribute_compactprintp());
  execute(tc_attribute_prettyprint1());
  execute(tc_attribute_prettyprint2());
  execute(tc_attribute_union());
  execute(tc_attribute_as_value());
  execute(tc_attribute_default_legacy());
  execute(tc_attribute_default_basic());
  execute(tc_attribute_default_standard());
  execute(tc_attribute_default_structured());
  execute(tc_attribute_as_value_asn());
  execute(tc_attribute_optional_as_value());
  execute(tc_attribute_metainfo_for_unbound());
  execute(tc_attribute_metainfo_for_unbound_negtest());
  execute(tc_attribute_metainfo_for_unbound_empty_rec());
  execute(tc_attribute_metainfo_for_unbound_arrays());
  execute(tc_attribute_as_value_rec());
  execute(tc_attribute_not_as_value_rec());
  execute(tc_attribute_as_value_fields());
  execute(tc_attribute_as_number());
  execute(tc_attribute_as_number_negtest());
  execute(tc_attribute_default_struct());
  execute(tc_attribute_chosen());
  execute(tc_attribute_chosen_negtest());
  execute(tc_attribute_chosen_default());
  execute(tc_attribute_as_map());
  execute(tc_attribute_as_map_in_union());
  execute(tc_attribute_text_as());
}
}
