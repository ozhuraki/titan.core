/******************************************************************************
 * Copyright (c) 2000-2021 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *
 ******************************************************************************/
module JsonTypes1 {

import from JsonData all;

const integer c_imported_i :=11;

type enumerated Days { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday };

type record R {
  integer i,
  charstring cs,
  boolean b,
  Days d
}

type record R2 {
  R r,
  float f
}

type record EmptyRec { }

type union A {
  R r,
  integer i,
  boolean b,
  float f
}

type record of universal charstring RoUCS;
type record of charstring RoCS;
type record of octetstring RoOS;
type record of integer RoI;

type record of verdicttype RoV; 
type record of float RoF;

type integer IntArr[3];
type float FloatArr[3];
type universal charstring StrArr[4];

type record Date {
  charstring month,
  integer day_idx,
  Days day_name
}

type record of Date Dates;

type record PhoneNumber {
  integer country_prefix,
  integer network_prefix,
  integer local_number
} with {
  variant(country_prefix) "JSON: name as CountryPrefix";
  variant(network_prefix) "JSON: name as NetworkPrefix";
  variant(local_number)   "JSON      :      name  as LocalNumber"
}


type record Profile0 {
  charstring name,
  PhoneNumber phone_no,
  charstring email_addr optional,
  Dates meetings optional
} 

type record Profile {
  charstring name,
  PhoneNumber phone_no,
  charstring email_addr optional,
  Dates meetings optional
} with {
  //variant(email_addr) "JSON : omit  as null";
  variant(meetings) "JSON:omit as null";
  variant(phone_no) "JSON: name as phone";
  variant(email_addr) "JSON: name as email";
}

type union CBA {
  integer i_val,
  Date date_val,
  float f_val,
  charstring cs_val
} with {
  variant(date_val) "JSON:name as date";
  variant(i_val) "JSON:name as int";
  variant(f_val) "JSON:name as float";
  variant(cs_val) "JSON:name as string";
}

type set Product {
  charstring name,
  float price optional,
  hexstring code
} with {
  variant(price) "JSON:omit as null"
}

type record KeywordFields {
  integer a1,
  integer a2,
  integer a3,
  integer a4,
  integer a5,
  integer a6,
  integer a7,
  integer a8,
  integer a9,
  integer a10,
  integer a11
}
with {
  variant(a1) "JSON: name as omit";
  variant(a2) "JSON: name as as";
  variant(a3) "JSON: name as null";
  variant(a4) "JSON: name as name";
  variant(a5) "JSON: name as value";
  variant(a6) "JSON: name as default";
  variant(a7) "JSON: name as extend";
  variant(a8) "JSON: name as metainfo";
  variant(a9) "JSON: name as for";
  variant(a10) "JSON: name as unbound";
  variant(a11) "JSON: name as JSON";
}

type union Thing {
  integer ival,
  float fval,
  boolean bval,
  enumerated { Tiny, Small, Average, Large, Huge } sizeval,
  bitstring bsval,
  octetstring osval,
  union {
    hexstring hsval,
    record of charstring rocsval
  } unival,
  charstring csval,
  universal charstring ucsval,
  Product prodval,
  record of integer roival,
  record {
    charstring name,
    float price,
    hexstring productID optional
  } prod2val
} with {
  variant "JSON:as value";
  variant (prod2val.productID) "name as 'code'";
  variant(unival) "JSON:as value";
}

type record of Thing Stuff;

type record RecDef {
  integer i,
  float f,
  boolean b optional,
  bitstring bs,
  hexstring hs,
  octetstring os,
  charstring cs,
  universal charstring ucs,
  enumerated { Tiny, Small, Medium, Large, Huge } size,
  verdicttype vt
} with {
  variant(cs) "JSON : default(empty)";
  variant(i) "JSON:default(-19)";
  variant(f) "JSON:default(1.0e6)";
  variant(size) "JSON:default(Tiny)";
  variant(os) "JSON : default(1DE7)";
  variant(ucs) "JSON:default(üres)";
  variant(bs) "JSON:default (101)";
  variant(hs) "JSON:default(DEAD)";
  variant(vt) "JSON:default(fail)";
  variant(b) "JSON:default(false)";
}

type record RecDef2 {
  integer i,
  float f,
  boolean b optional,
  bitstring bs,
  hexstring hs,
  octetstring os,
  charstring cs,
  universal charstring ucs,
  enumerated { Tiny, Small, Medium, Large, Huge } size,
  verdicttype vt
} with {
  variant(cs) "default(\"empty\")";
  variant(i) "default(-19)";
  variant(f) "default(1.0e6)";
  variant(size) "default(Tiny)";
  variant(os) "default('1DE7'O)";
  variant(ucs) "default(""üres"")";
  variant(bs) "default ('101'B)";
  variant(hs) "default('DEAD'H)";
  variant(vt) "default(fail)";
  variant(b) "default(false)";
}

type record Product2 {
	charstring name,
	float price,
	octetstring id optional,
	charstring origin,
	universal charstring text
}
with {
	variant(id) "default ('FFFF'O)"
	variant(origin) "default(""Hungary"")"
	variant(text) "default (char(1,2,3,4\) & char(5,6,7,8\) & ""?"")"
}

type record Shopping_cart {
	charstring name,
	Product2 product
} with {
	variant(product) "default ({""Shirt"", 12.99, omit, ""Hungary"", ""available"" })"
}

const Product2 c_defaultProduct := {	
	name := "Size ""M"" Shirt",
	price := 12.99,
	id := omit,
	origin := "Hungary",
	text := "available"
}

type record Shopping_cart_2 {
	charstring name,
	Product2 product
} with {
	variant(product) "default (c_defaultProduct)"
}

type union Uni {
  integer i,
  charstring cs
}

type record RecDef3 {
  EmptyRec er,
  Uni u,
  RoI roi
}
with {
  variant (er) "default ( { } )";
  variant (u) "default ({ i := -6 })";
  variant (roi) "default ({1,2,3})";
}

type record HasPardType {
  ProtocolElem_Field1 pard,
  boolean buul,
  Price price
}

type union AsnThing {
  AsnNull nval,
  AsnInt ival,
  AsnAny anyval,
  AsnVisibleString vsval,
  ProtocolElem_Field1 pardval
} with {
  variant "JSON: as value";
}

type record of AsnThing AsnStuff;


} with {
  encode "JSON";
}
