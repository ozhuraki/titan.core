/******************************************************************************
 * Copyright (c) 2000-2021 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 *
 * Contributors:
 *   Balasko, Jeno
 *   Baranyi, Botond
 *   Raduly, Csaba
 *   Szabo, Janos Zoltan â€“ initial implementation
 *
 ******************************************************************************/
module TtemplateFloat {
type component templateFloat_mycomp {};
type record templateFloat_rec {
 float x1,
 float x2,
 float x3 optional };
template templateFloat_rec templateFloat_tSpec :={ //specific values
 x1:=1.1,
 x2:=2.1,
 x3:=3.1 };
template templateFloat_rec templateFloat_tList :={ //specific value and value list
 x1:=1.1,
 x2:=(2.1,3.1,6.1),
 x3:=3.1 };
template templateFloat_rec templateFloat_tComp :={ //specific value and compl. list
 x1:=1.1,
 x2:=complement (2.1,3.1,6.1),
 x3:=3.1 };
template templateFloat_rec templateFloat_tOmit :={ //omitting values
 x1:=1.1,
 x2:=2.1,
 x3:=omit } ;
template templateFloat_rec templateFloat_tAny :={ //specific and any value
 x1:=1.1,
 x2:=2.1,
 x3:=? } ;
template templateFloat_rec templateFloat_tAnyorNone :={ //specific and AnyorNone value
 x1:=1.1,
 x2:=2.1,
 x3:=* };
template templateFloat_rec templateFloat_tRange1 :={ //specific value and Range
 x1:=1.1,
 x2:=(2.1 ..4.1),
 x3:=3.1 };
template templateFloat_rec templateFloat_tRange2 :={ //specific value and Range
 x1:=1.1,
 x2:=(2.1 .. 4.1),
 x3:=3.1 };
template templateFloat_rec templateFloat_tRange3 :={ //specific value and Range
 x1:=1.1,
 x2:=(2.1 .. infinity),
 x3:=3.1 };
template templateFloat_rec templateFloat_tRange4 :={ //specific value and Range
 x1:=1.1,
 x2:=(-infinity .. 4.1),
 x3:=3.1 };
template templateFloat_rec templateFloat_tIfpresent :={ //specific value and ifpresent
 x1:=1.1,
 x2:=2.1,
 x3:=3.1 ifpresent };
 
template float templateFloat_tNaN := not_a_number;
template float templateFloat_tPosInf := infinity;
template float templateFloat_tNegInf := -infinity;

testcase templateFloatSpec() runs on templateFloat_mycomp {
var templateFloat_rec x1,x2;		//specific value
x1:={ x1:=1.1,  x2:=2.1,  x3:=3.1 };
x2:={ x1:=2.1,  x2:=2.1,  x3:=3.1 };
//match
if (match(x1,templateFloat_tSpec)) {setverdict(pass);}
 else {setverdict(fail);}
//no match
if (not(match(x2,templateFloat_tSpec))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateFloatList() runs on templateFloat_mycomp {
var templateFloat_rec x1,x2,x3;		//value list
x1:={ x1:=1.1,  x2:=6.1,  x3:=3.1 };
x2:={ x1:=1.1,  x2:=7.1,  x3:=3.1 };
x3:={ x1:=2.1,  x2:=6.1,  x3:=3.1 };
//match
if (match(x1,templateFloat_tList)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: out of list
if (not(match(x2,templateFloat_tList))) {setverdict(pass);}
 else {setverdict(fail);}
//no match: other field
if (not(match(x3,templateFloat_tList))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateFloatComp() runs on templateFloat_mycomp {
var templateFloat_rec x1,x2,x3;		//complemented list
x1:={ x1:=1.1,  x2:=7.1,  x3:=3.1 };
x2:={ x1:=1.1,  x2:=6.1,  x3:=3.1 };
x3:={ x1:=2.1,  x2:=7.1,  x3:=3.1 };
//match
if (match(x1,templateFloat_tComp)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: in the list
if (not(match(x2,templateFloat_tComp))) {setverdict(pass);}
 else {setverdict(fail);}
//no match: other field
if (not(match(x3,templateFloat_tComp))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateFloatOmit() runs on templateFloat_mycomp {
var templateFloat_rec x1,x2,x3;		//omitting value
x1:={ x1:=1.1,  x2:=2.1,  x3:=omit };
x2:={ x1:=1.1,  x2:=2.1,  x3:=3.1 };
x3:={ x1:=2.1,  x2:=2.1,  x3:=omit };
//match
if (match(x1,templateFloat_tOmit)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: not omitted
if (not(match(x2,templateFloat_tOmit))) {setverdict(pass);}
 else {setverdict(fail);}
//no match: other field
if (not(match(x3,templateFloat_tOmit))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateFloatAny() runs on templateFloat_mycomp {
var templateFloat_rec x1,x2,x3;		//any value
x1:={ x1:=1.1,  x2:=2.1,  x3:=3.1 };
x2:={ x1:=1.1,  x2:=2.1,  x3:=omit };
x3:={ x1:=2.1,  x2:=2.1,  x3:=3.1 };
//match
if (match(x1,templateFloat_tAny)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: field omitted
if (not(match(x2,templateFloat_tAny))) {setverdict(pass);}
 else {setverdict(fail);}
//no match: other field
if (not(match(x3,templateFloat_tAny))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateFloatAnyorNone() runs on templateFloat_mycomp {
var templateFloat_rec x1,x2,x3;		//AnyorNone value
x1:={ x1:=1.1,  x2:=2.1,  x3:=omit };
x2:={ x1:=1.1,  x2:=2.1,  x3:=3.1 };
x3:={ x1:=2.1,  x2:=2.1,  x3:=omit };
//match: omitted
if (match(x1,templateFloat_tAnyorNone)) {setverdict(pass);}
 else {setverdict(fail);}
//match: value
if (match(x2,templateFloat_tAnyorNone)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: other field
if (not(match(x3,templateFloat_tAnyorNone))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateFloatRange1() runs on templateFloat_mycomp {
var templateFloat_rec x1,x2,x3;		//Range ( .. )
x1:={ x1:=1.1,  x2:=2.1,  x3:=3.1 };
x2:={ x1:=1.1,  x2:=5.1,  x3:=3.1 };
x3:={ x1:=2.1,  x2:=2.1,  x3:=3.1 };
//match
if (match(x1,templateFloat_tRange1)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: out of range
if (not(match(x2,templateFloat_tRange1))) {setverdict(pass);}
 else {setverdict(fail);}
//no match: other field
if (not(match(x3,templateFloat_tRange1))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateFloatRange2() runs on templateFloat_mycomp {
var templateFloat_rec x1,x2,x3;		//Range ( to )
x1:={ x1:=1.1,  x2:=2.1,  x3:=3.1 };
x2:={ x1:=1.1,  x2:=5.1,  x3:=3.1 };
x3:={ x1:=2.1,  x2:=2.1,  x3:=3.1 };
//match
if (match(x1,templateFloat_tRange2)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: out of range
if (not(match(x2,templateFloat_tRange2))) {setverdict(pass);}
 else {setverdict(fail);}
//no match: other field
if (not(match(x3,templateFloat_tRange2))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateFloatRange3() runs on templateFloat_mycomp {
var templateFloat_rec x1,x2,x3;		//Range, with infinity
x1:={ x1:=1.1,  x2:=8.1,  x3:=3.1 };
x2:={ x1:=1.1,  x2:=-5.1,  x3:=3.1 };
x3:={ x1:=2.1,  x2:=2.1,  x3:=3.1 };
//match
if (match(x1,templateFloat_tRange3)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: out of range
if (not(match(x2,templateFloat_tRange3))) {setverdict(pass);}
 else {setverdict(fail);}
//no match: other field
if (not(match(x3,templateFloat_tRange3))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateFloatRange4() runs on templateFloat_mycomp {
var templateFloat_rec x1,x2,x3;		//Range with - infinity
x1:={ x1:=1.1,  x2:=-2.1,  x3:=3.1 };
x2:={ x1:=1.1,  x2:=5.1,  x3:=3.1 };
x3:={ x1:=2.1,  x2:=2.1,  x3:=3.1 };
//match
if (match(x1,templateFloat_tRange4)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: out of range
if (not(match(x2,templateFloat_tRange4))) {setverdict(pass);}
 else {setverdict(fail);}
//no match: other field
if (not(match(x3,templateFloat_tRange4))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateFloatIfpresent() runs on templateFloat_mycomp {
var templateFloat_rec x1,x2,x3,x4;		//ifpresent
x1:={ x1:=1.1,  x2:=2.1,  x3:=3.1 };
x2:={ x1:=1.1,  x2:=2.1,  x3:=omit };
x3:={ x1:=1.1,  x2:=2.1,  x3:=4.1 };
x4:={ x1:=2.1,  x2:=2.1,  x3:=omit };
//match: present and match
if (match(x1,templateFloat_tIfpresent)) {setverdict(pass);}
 else {setverdict(fail);}
//match: not present
if (match(x2,templateFloat_tIfpresent)) {setverdict(pass);}
 else {setverdict(fail);}
//no match: present and not match
if (not(match(x3,templateFloat_tIfpresent))) {setverdict(pass);}
 else {setverdict(fail);}
////no match: other field
if (not(match(x4,templateFloat_tIfpresent))) {setverdict(pass);}
 else {setverdict(fail);}
}

testcase templateFloatSpecialValues() runs on templateFloat_mycomp {
  var float v_nan := not_a_number;
  var float v_pos_inf := infinity;
  var float v_neg_inf := -infinity;
  
  if (match(v_nan, templateFloat_tNaN)) { setverdict(pass); }
  else { setverdict(fail, "not_a_number should match itself"); }
  
  if (match(v_pos_inf, templateFloat_tPosInf)) { setverdict(pass); }
  else { setverdict(fail, "infinity should match itself"); }
  
  if (match(v_neg_inf, templateFloat_tNegInf)) { setverdict(pass); }
  else { setverdict(fail, "-infinity should match itself"); }
}

function f_close_to_zero(float p_par, float p_epsylon := 0.001) return boolean {
  if (p_par < 0.0) { p_par := -p_par; }
  return p_par < p_epsylon;
}

template float t_conjunction := conjunct((-infinity..0.0), @dynamic f_close_to_zero);

template float t_implication := (0.0..infinity) implies @dynamic f_close_to_zero;

// matches if the integral part of the number matches the template parameter
template float t_dynamic(template integer pt_int) := @dynamic {
  return match(float2int(value), pt_int);
}

testcase templateFloatConjunction() runs on templateFloat_mycomp {
  var float v1 := -0.00091, v2 := -0.0016;
  if (not match(v1, t_conjunction)) {
    setverdict(fail, match(v1, t_conjunction));
  }
  if (match(v2, t_conjunction)) {
    setverdict(fail, match(v2, t_conjunction));
  }
  setverdict(pass);
}

testcase templateFloatImplication() runs on templateFloat_mycomp {
  var float v1 := -2.1, v2 := 0.19, v3 := 7.4e-5;
  if (not match(v1, t_implication)) {
    setverdict(fail, match(v1, t_implication));
  }
  if (match(v2, t_implication)) {
    setverdict(fail, match(v2, t_implication));
  }
  if (not match(v3, t_implication)) {
    setverdict(fail, match(v3, t_implication));
  }
  setverdict(pass);
}

testcase templateFloatDynamic() runs on templateFloat_mycomp {
  var float v1 := 6.1741, v2 := -67.011;
  var template integer vt1 := (1..10), vt2 := (0..infinity);
  if (not match(v1, t_dynamic(vt1))) {
    setverdict(fail, match(v1, t_dynamic(vt1)));
  }
  if (match(v2, t_dynamic(vt2))) {
    setverdict(fail, match(v2, t_dynamic(vt2)));
  }
  setverdict(pass);
}

control {
 execute(templateFloatSpec());
 execute(templateFloatList());
 execute(templateFloatComp());
 execute(templateFloatOmit());
 execute(templateFloatAny());
 execute(templateFloatAnyorNone());
 execute(templateFloatRange1());
 execute(templateFloatRange2());
 execute(templateFloatRange3());
 execute(templateFloatRange4());
 execute(templateFloatIfpresent());
 execute(templateFloatSpecialValues());
 execute(templateFloatConjunction());
 execute(templateFloatImplication());
 execute(templateFloatDynamic());
}
}
